#include "encoderlib.h"

#include <stdio.h>
#include <avr/io.h>
#include <avr/pgmspace.h>

uint8_t left_encoder_count(void)
{
	return(lefttick);
}

uint8_t right_encoder_count(void)
{
	return(righttick);
}

void reset_encoders(void) // This is the requirement for the Open Source project. A simple modification can enable modification of only one of the counters.
{
	lefttick = 0;
	righttick = 0;
	return;
}

void encoder_setup(void)
{
	reset_encoders();
	DDRD &= ~((1<<PD2)|(1<<PD3)); // Sets PD2 and PD3 to input and leaves the rest of PORTD/PIND alone. May not be necessary.
	EIMSK |= (1<<INT0)|(1<<INT1); // Enables INT0 and INT1 but leaves the rest of this register unchanged.
	uint8_t temporary=EICRA; // Necessary as ISC are two bit for each of INT0, INT1, INT2 and do not wish to overwrite INT2.
	temporary &= 0b11110000; // leaves bits 7-4 unchanged, bits 3-0 all set to 0 for setting up INT0 and INT1.
	EICRA |= (1<<ISC00)|(1<<ISC10); // Sets INT0 and INT 1 to trigger on either a rising or falling edge. For N holes/notches in the encoder wheel, there will be 2N ticks on the counter variables.
	EICRA |= temporary|EICRA; // This preserves the original configuration of EICRA.
}

ISR(INT0_vect)  // PD2, left wheel.
{
	lefttick++;
	//printf_P(PSTR("The left count is %d\n"),lefttick); // For testing with PuTTy.
	EIFR |= (1<<INTF0); // Clears this interrupt.
}

ISR(INT1_vect)  // PD3, Right wheel.
{
	righttick++;
	//printf_P(PSTR("The right count is %d\n"),righttick); // For testing with PuTTy.
	EIFR |= (1<<INTF1); // Clears this interrupt.
}

ISR(__vector_default)
{
	// If an unexpected interrupt occurs this will toggle.
}
