/*
 * MCS_Encoder_1.c
 *
 * Created: 10/07/2015 3:02:41 PM
 *  Author: Jasper Dupuis
 */ 

/* This enables PuTTY testing. Put this in any module that requires testing.

Must include the command init_uart(); in the main program to be tested.

*/


#include <avr/io.h>
#include <avr/interrupt.h>
#include "encoderlib.h"



#define PWM_LEFT ocra
#define PWM_RIGHT ocrb
#define timer2_upcount 56
#define speed 1

volatile uint8_t left;
volatile uint8_t right;
volatile uint8_t timer2;
volatile uint8_t ocra;
volatile uint8_t ocrb;

void PWM_SETUP(void);
void TIMER2_SETUP(void);

int main(void)
{
   cli();
   PWM_SETUP();
   TIMER2_SETUP();
   encoder_setup();
   
   init_uart();
   
   PORTB &= ~((1<<PB2)|(1<<PB0)); // IN1 0V and PWM on IN2 => Motors Stop.
   
   PWM_LEFT = 200;
   PWM_RIGHT = 197;
   
   sei();					//allow interrupts to start
   
   while(1)
   {
	   if(timer2 >= timer2_upcount)
	   {
	
				if(righttick<speed){
					PWM_RIGHT--;
				}else if(righttick>speed){
					PWM_RIGHT++;
				}
	 
				if(lefttick<speed){
					PWM_LEFT--;
				}else if(lefttick>speed){
					PWM_LEFT++;
				}
				timer2 = 0;
				lefttick = 0;
				righttick = 0;
		}
	}
}

/* This function sets 8-bit Timer 2 to CTC mode with a prescale of 1024. This makes the frequency of 
interrupt entirely dependent on the value of OCR2A and the predefined timer2 value. The timer interrupt mask
for output compare A is set and called by ISR(TIMER2_COMPA_vect). 

With OCR2A = 255 and timer2_upcount = 2, the effective frequency of interrupt is 13Hz.

*/

void TIMER2_SETUP(void)
{
	 timer2=0;
	 //Timer 2 setup.
	 TCCR2A = (1<<COM2A1) | (1<<COM2A0) | (1<<WGM21) ; //COM2 bits: Set OC2A on compare match. WGM2:0 = 2 enables CTC mode.
	 OCR2A = 0xFF; // Triggers when TCNT2 = 255.
	 TCNT2 = 0; // initial value;
	 TIMSK2 = (1<<OCIE2A);
	 TCCR2B = (1<<CS21); // N = 8. Effective timer frequency is f = (f_clock)/ (2 * N * (1+ OCR2A).
	 
	 // Effective compare frequency is f = f = (f_clock)/ (2 * N * (1+ OCR2A).
	 // from uint8_t variable timer2, effective frequency is .
	return;
}

/* 
This function enables phase correct PWM output. This was suggested by the AVR 
datasheet as the preferred method of PWM for motor control. The duty cycles are 

N = 8, by the prescale value below.
The effective PWM frequency is given by f = (f_clock) / (510 * N) =~ 3431 Hz.

To increase forward motor speed (and/or torque), decrease PWM_LEFT or PWM_RIGHT.
To decrease forward motor speed, increase PWM_LEFT or PWM_RIGHT.

LEFT_PWM is PB3, the Blue lead on the left of the solder board.
PWM_RIGHT is PB4, the blue lead on the right of the solder board.

Due to a hardware install error, PWM right runs on inverted logic.

*/

void PWM_SETUP(void)
{
	
   DDRB|=(1<<PB0)|(1<<PB2)|(1<<PB3)|(1<<PB4);

   //Timer configuration off of which output compare 1 runs.
   TCCR0A = (1<<WGM00);		//Phase correct PWM mode.
   TCCR0A |= (1<<COM0B1)|(1<<COM0A1);		// Clears on count up, sets on count down. Symmetric about peak value 0xFF.

   TCCR0B = (1<<CS01);			//prescaler 8

   //Interrupt mask enables
   PWM_LEFT = 255;				//(sets the pin to logic 1)
   PWM_RIGHT = 255;

   TIMSK0 = (1<<OCIE0B)|(1<<OCIE0A);		//interrupt is enabled for OCR0A and OCR0B
   return;
}
/*
ISR(TIMER0_COMPA_vect){
	OCR0A = PWM_LEFT;
}

ISR(TIMER0_COMPB_vect){
	OCR0B = PWM_RIGHT;
}

*/

ISR(TIMER2_COMPA_vect)
{
	timer2++;
/*
	if(timer2 == timer2_upcount)
	{
		if(lefttick<speed) PWM_LEFT--;
		if(righttick<speed) PWM_RIGHT--;
		if(lefttick>speed) PWM_LEFT++;
		if(righttick>speed) PWM_RIGHT++;
		reset_encoders();
		timer2=0;
	}
*/
	TCNT2 = 0;
}
