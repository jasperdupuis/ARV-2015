#include "MCS.h"

void mcs(uint8_t distance, uint8_t left_speed, uint8_t right_speed)
{
	/*motor control function where the speed and distance is passed
	by the caller and direction is determined by the caller*/
	
	int8_t PID_left_out = 0;
	int8_t PID_right_out = 0;
	
	rightdistance = 0;
	leftdistance = 0;
	
	int8_t differential = 0;    // dx/dt
	int8_t proportional = 0; // x(t)
	int8_t integral = 0; // S(xdt)
	
	reset_distances();
	
	int8_t left_error = 0;
	int8_t right_error = 0;
	
	int8_t righttick;
	int8_t lefttick;
	
	/*loop until the distance is reached*/
	while((distance > rightdistance)&&(distance > leftdistance))
	{
		if(timer2 >= timer2_upcount)
		{
			
		PORTD ^=1;
		
		lefttick = left_encoder_count();
		righttick = right_encoder_count();
		reset_encoders();
		
		// HEADING CONTROL

			differential = lefttick - righttick; // this is the dx/dt term for the pid controller.
			// +1 ==> we have gone off course to the left by ~6.7 degrees.
				// speed up left, slow down right.
			// -1 ==> we have gone off course to the right by ~6.7 degrees
				// slow down left, speed up right
		
			proportional += ki(differential); // x(t)
			integral += proportional ; // s(xdt)
		
		// LEFT SPEED CONTROL
		
			left_error = left_speed - lefttick; //
			
			PID_left_out = (kd(left_error)) - (kd(differential)) - ((proportional));
	//		PID_left_out = (ks(left_error)) + (kp(proportional)) + (ki(integral));
	//		PID_left_out = (ks(left_error)) + (kp(proportional)) + (kd(differential));
	//		PID_left_out = (ks(left_error)) + (kp(proportional)) + (ki(integral)) + (kd(differential));
	//		PID_left_out = (ks(left_error)) + (kp(proportional)) + (ki(integral));
			
			PWM_LEFT += PID_left_out;
		
		// RIGHT SPEED CONTROL
	
			right_error = right_speed - righttick;
			
			PID_right_out = (ks(right_error)) + (kd(differential)) + ((proportional));
	//		PID_right_out = (ks(right_error)) - (kp(proportional)) - (ki(integral));
	//		PID_right_out = (ks(right_error)) - (kp(proportional)) - (kd(differential));
	//		PID_right_out = (ks(right_error)) - (kp(proportional)) - (ki(integral)) - (kd(differential));
	//		PID_left_out = (ks(right_error)) - (kp(proportional)) - (ki(integral));
			
			PWM_RIGHT += PID_right_out;	
						
			printf_P(PSTR(" difference: %d					difference_sum: %d \n"),differential,proportional); // For testing with PuTTy.
			printf_P(PSTR(" Left PWM: %d  ticks: %d				"),PWM_LEFT,lefttick); // For testing with PuTTy.
			printf_P(PSTR(" Right PWM: %d  ticks: %d			 \n"),PWM_RIGHT,righttick);
			printf_P(PSTR(" PWM LMOD: %d						"),PID_left_out); // For testing with PuTTy.
			printf_P(PSTR(" PWM RMOD: %d					 \n \n \n"),PID_right_out);
						
			timer2 = 0;
		}/*
		if((proportional > 10)||(proportional < 10)){
			proportional =0;
		}*/
	}
	/*brake the wheels*/
	brake();
}

/*
This is the main motor control algorithm. It takes a direction, distance and two speeds as input.
*/

void direction_control(enum DIRECTION dir, uint8_t distance, uint8_t left_speed, uint8_t right_speed){
	switch(dir){
		case FORWARD:
			PORTB |= ((1<<PB2)|(1<<PB0));
			PWM_RIGHT = 50;
			PWM_LEFT = 50;
			mcs(distance,left_speed,right_speed);
			break;
		case REVERSE:
			//Do nothing for now, will be required later.
		case RIGHT:
			/*make the right wheel go in reverse at speed 2 and distance 13
			should move 90 deg*/
			PORTB &= ~(1<<PINB0);
			PORTB |= (1<<PINB2);
			PWM_RIGHT = 50;
			PWM_LEFT = 50;
			mcs(13,3,3);
			break;
		case LEFT:
			/*make the left wheel go in reverse at speed 2 and distance 13
			should move 90 deg*/
			PORTB &= ~(1<<PINB2);
			PORTB |= (1<<PINB0);
			PWM_RIGHT = 50;
			PWM_LEFT = 50;
			mcs(13,3,3);
			break;
		};
	
};

void brake()
{
	timer2=0;
	while(timer2<10)
	{
		PWM_RIGHT = 0;
		PWM_LEFT = 0;
		PORTB &= ~((1<<PB0)|(1<<PB2));
	}
	timer2=0;
}

/* This function sets 8-bit Timer 2 to CTC mode with a prescale of 1024. This makes the frequency of
interrupt entirely dependent on the value of OCR2A and the predefined timer2 value. The timer interrupt mask
for output compare A is set and called by ISR(TIMER2_COMPA_vect).

With OCR2A = 255 and timer2_upcount = 2, the effective frequency of interrupt is 13Hz.

*/

void TIMER2_SETUP(void)
{
	timer2=0;
	TCCR2A = (1<<COM2A1) | (1<<COM2A0) | (1<<WGM21) ; //COM2 bits: Set OC2A on compare match. WGM2:0 = 2 enables CTC mode.
	OCR2A = 0xFF; // Triggers when TCNT2 = 255.
	TCNT2 = 0; // Initial value;
	TIMSK2 = (1<<OCIE2A);
	TCCR2B = (1<<CS22)|(1<<CS21)|(1<<CS20); // N = 1024. Effective timer frequency is f = (f_clock)/ (2 * N * (1+ OCR2A).
	
	// Effective compare frequency is f = (f_clock)/ (2 * N * (1+ OCR2A) = 26Hz.
	
	return;
}

/*
This function enables phase correct PWM output. This was suggested by the AVR
datasheet as the preferred method of PWM for motor control. The duty cycles are

N = 8, by the prescale value below.
The effective PWM frequency is given by f = (f_clock) / (510 * N) =~ 3431 Hz.

To increase forward motor speed (and/or torque), decrease PWM_LEFT or PWM_RIGHT.
To decrease forward motor speed, increase PWM_LEFT or PWM_RIGHT.

LEFT_PWM is PB3, the Blue lead on the left of the solder board.
PWM_RIGHT is PB4, the blue lead on the right of the solder board.

Due to a hardware install error, PWM right runs on inverted logic.

*/

void PWM_SETUP(void)
{
	
	DDRB|=(1<<PB0)|(1<<PB2)|(1<<PB3)|(1<<PB4);
	PORTB &= ~((1<<PB0)|(1<<PB2));
	//Timer configuration off of which output compare 1 runs.
	TCCR0A = (1<<WGM00);		//Phase correct PWM mode.
	TCCR0A |= (1<<COM0B1)|(1<<COM0A1);		// Clears on count up, sets on count down. Symmetric about peak value 0xFF.

	TCCR0B = (1<<CS01)|(1<<CS00);			//prescaler 64
	// TIMSK0 = (1<<OCIE0A)|(1<<OCIE0B); // enable compare interrupt vector.
	PWM_LEFT = 0;				//(sets the pin to logic 1 AKA sets motors to STOP)
	PWM_RIGHT = 0;
	return;
}

ISR(TIMER2_COMPA_vect)
{
	timer2++;
	TCNT2 = 0;
}
